version: 2
jobs:
  build:
    docker:          
      - image: circleci/python:2.7

        environment:
          # Make CircleCI specific environment variables more generic.
          BUILD_NUM: "$CIRCLE_BUILD_NUM"
          COMMIT_SHA1: "$CIRCLE_SHA1"
          BRANCH: "$CIRCLE_BRANCH"
          USER_NAME: "$CIRCLE_PROJECT_USERNAME"
          REPO_NAME: "$CIRCLE_PROJECT_REPONAME"
          VERSION: "$CIRCLE_BRANCH_$CIRCLE_BUILD_NUM_$CIRCLE_SHA1:0:8"
          ARTIFACT_DIR: "$CIRCLE_WORKING_DIRECTORY"
          DMSA_TEST_BRANCH: "master"
          DMSA_TEST_SERVICE: "http://127.0.0.1:8123/"
          DMSA_TEST_CONTAINER_URL: "http://127.0.0.1:5000/"
          PULL_NUM: "$CIRCLE_PR_NUMBER"
          PULL_REPO: "$CIRCLE_PR_REPONAME"
          PULL_USER: "$CIRCLE_PR_USERNAME"

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Dependencies
          command: |
            # Clone DMSA
            git clone --branch ${DMSA_TEST_BRANCH} https://github.com/chop-dbhi/data-models-sqlalchemy.git ${CIRCLE_WORKING_DIRECTORY}/data-models-sqlalchemy

            # Install jq
            mkdir -p ~/bin
            if [[ ! -e ~/bin/jq ]]; then
              curl -L -o ~/bin/jq http://stedolan.github.io/jq/download/linux64/jq;
              chmod 0755 ~/bin/jq;
            fi

            # Install DMSA requirements
            pip install --user -r ${CIRCLE_WORKING_DIRECTORY}/data-models-sqlalchemy/requirements.txt
            python ${CIRCLE_WORKING_DIRECTORY}/data-models-sqlalchemy/setup.py install --user
            pip install --user docker-py

            # Load DMSA image
            if [[ -e ~/docker/dmsa.tar ]]; then
              docker load --input ~/docker/dmsa.tar
            fi
            docker pull "dbhi/data-models-sqlalchemy:${DMSA_TEST_BRANCH/master/latest}"

            # Load DMS image
            if [[ -e ~/docker/dms.tar ]]; then
              docker load --input ~/docker/dms.tar
            fi
            docker pull dbhi/data-models

            # Save DMSA and DMS images for next build
            mkdir -p ~/docker
            docker save "dbhi/data-models-sqlalchemy:${DMSA_TEST_BRANCH/master/latest}" > ~/docker/dmsa.tar
            docker save dbhi/data-models > ~/docker/dms.tar


      - run:
          name: Test
          command: |
            # Run the dms service locally using the data-models version being tested.
            # For pull requests, we need to do some fancy github API work...
  
            if [ -z "$CIRCLE_PR_NUMBER" ]; then
              docker run -d -p "8123:8123" --name dms dbhi/data-models -path /opt/repos -repo "https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}@${CIRCLE_BRANCH}" && sleep 10
            else
              docker run -d -p "8123:8123" --name dms dbhi/data-models -path /opt/repos -repo "https://github.com/${CIRCLE_PR_USERNAME}/${CIRCLE_PR_REPONAME}@$(curl -s https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PR_NUMBER} | jq --raw-output '.head.ref')" && sleep 10
            fi

            # Simple verification of DMS
            #curl -s http://127.0.0.1:8123/?format=json | grep --silent 'Data Models Service' || (docker logs dms; false)

            echo ${DMSA_TEST_BRANCH}
            pwd
            ls -l
            docker ps -a
            docker images
            
            # Run the dmsa container locally.
           #docker run -d -p "5000:80" --name dmsa --link dms:dms "dbhi/data-models-sqlalchemy:master/master/latest}" gunicorn --bind="0.0.0.0:80" --workers=4 'dmsa.service:build_app("http://dms:8123/")'; sleep 10

            # Simple verification of DMSA
            #curl -s http://127.0.0.1:5000/ | grep --silent 'Data Models DDL and ERDs' || (docker logs dmsa; false)

            # Integration testing of the running container service.
            #cd ${CIRCLE_WORKING_DIRECTORY}/data-models-sqlalchemy; nosetests dmsa.tests.container_integration

            # Save DDL to artifact directory.
            #mkdir -p "${ARTIFACT_DIR}/ddl"
            #cd ${CIRCLE_WORKING_DIRECTORY}/data-models-sqlalchemy; python dmsa/tests/output_all_ddl.py "${ARTIFACT_DIR}/ddl/dms_${VERSION//\//_}_all_ddl.sql"

            # Save DMS and DMSA logs to artifact directory.
            #mkdir -p "${ARTIFACT_DIR}/log"
            #docker logs dms > "${ARTIFACT_DIR}/log/dms.log" 2>&1
            #docker logs dmsa > "${ARTIFACT_DIR}/log/dmsa.log" 2>&1

      - store_test_results:
          path: "$ARTIFACT_DIR/log"

      - store_artifacts:
          path: "$ARTIFACT_DIR/log"
          destination: tr1
