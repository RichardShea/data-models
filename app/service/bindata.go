package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_definition_md = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x50\x4d\x4b\x03\x31\x10\xbd\xcf\xaf\x18\xd8\x1e\x6c\x61\xe3\xbd\xe0\xad\x08\x42\xf1\x20\xc5\x4b\xf1\x90\xb6\x13\x09\xac\xb1\x24\xb9\x48\x3a\xff\xdd\xc9\xc7\xba\xbb\xa8\x7b\x99\x7d\xf3\xf1\xde\xcb\xeb\x30\x25\xb5\xd7\x27\x1a\x98\x01\x36\x4f\xbb\x6d\x6e\x3c\xeb\x0f\x62\xbe\x97\xbf\x57\xf2\xc1\x7e\x3a\xe6\x0d\x40\xd7\xe1\x41\x9f\x06\x0a\x90\x92\xd7\xee\x9d\x70\x15\x71\xfb\x80\xaa\x76\xd5\xde\x86\xc8\xdc\xe3\x31\xa5\x55\x6c\x1c\x6f\x77\xdd\x0c\xad\xe5\x92\xdc\x45\xa4\x26\x86\x5f\x04\xa2\x93\x5d\xfd\x1c\x01\x14\xb0\xa3\x70\xf6\xf6\x1a\x8b\x1b\x80\x3c\xc3\x1b\x1e\xbe\xae\xb9\xbc\x90\x21\x4f\xee\x4c\x41\xc0\x6c\x13\xfa\xfc\xdd\xfa\x79\xf9\x03\x4c\x76\x8c\xd8\x11\xb1\x47\x4b\xc3\x65\x34\x24\xf2\xa6\x79\x11\xf6\x82\xb2\x6c\x43\xd6\xc8\x95\x12\x03\xe5\x86\xf9\x58\x16\x46\x5c\x9f\xb6\x08\xe3\x9f\xe1\x1a\x97\xb3\xda\x6d\x79\x8d\xba\xcb\x10\xa6\x30\x6b\xfd\x0e\x00\x00\xff\xff\x9d\x65\x41\xc6\xcd\x01\x00\x00")

func assets_definition_md_bytes() ([]byte, error) {
	return bindata_read(
		_assets_definition_md,
		"assets/definition.md",
	)
}

func assets_definition_md() (*asset, error) {
	bytes, err := assets_definition_md_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/definition.md", size: 461, mode: os.FileMode(420), modTime: time.Unix(1432289186, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_full_md = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\x4d\x6f\x9c\x30\x10\xbd\xfb\x57\x58\xf2\xa5\x8b\x64\xb8\xef\xb5\x51\xa5\x48\xa4\xaa\x92\x6d\x2f\x55\xa5\x78\x61\xb2\x41\x02\x83\x30\x3d\x54\xac\xff\x7b\xed\x31\xd8\x40\x4d\x9a\x3d\x84\x8b\xed\xf9\x78\xf3\x3c\xf3\x0c\xa3\xe3\x98\xe6\xe2\x0c\xb5\xd6\x84\x70\x7a\x7f\x77\xb4\x96\xaf\xa2\x01\xad\x33\xb3\xfb\x01\xbd\xaa\x5a\x69\xbc\x9c\x7e\x7f\xcc\xd1\x6b\x56\x1b\xcd\x18\x3d\x89\x73\x0d\x8a\x90\x71\xec\x85\xbc\x00\x4d\x9d\x21\xcd\x2b\x35\x68\xcd\xe9\x4f\x8f\xf5\xeb\x13\xf3\xfb\x83\x89\x07\x59\x5a\x8c\x78\x22\x63\x81\x04\x1d\x43\x22\x26\xa4\x77\xa0\x8a\xbe\xea\x06\x47\x8b\x24\xc9\x97\x0a\xea\x52\x25\xc9\x02\xce\x99\x76\x79\x60\xb5\xc9\xc2\x23\xbc\xe2\x38\x8c\xfd\x4b\x2c\x8e\x84\x44\xab\x17\x9a\x3e\xc2\x0b\xf4\x20\x0b\x50\x5a\x27\x78\x50\x74\x68\x8f\x48\x28\xf8\x5c\x99\x15\x96\xe3\xf9\x66\xc8\x81\x66\x71\x9c\x77\x23\xf0\xfd\xec\x43\xb2\x98\xd1\xb6\xe5\xee\x6e\xa7\x3f\x1d\xb8\xa6\x30\xfa\x54\xbc\x42\x23\xac\x82\xac\xf5\x48\x9f\x6d\x6b\xd0\xff\xec\x82\x73\x90\x97\xe1\x15\x65\xe4\xb6\xa8\xa4\xd9\x3a\xd5\x72\xa1\xdf\x7a\x28\x2a\x2f\x3a\x7f\xc2\x84\x85\x6f\x95\xf3\x54\x88\x1a\x30\x1e\x77\x18\x3b\xd9\xc2\x4c\xfd\x7d\x6c\xc6\x83\xe8\xba\x4a\x5e\xd4\x7c\x83\xf9\x4c\xc8\x43\x5b\x42\x4d\xaf\x74\x92\xbe\xd9\x61\xcf\xcc\x8a\x0d\x32\xeb\xe7\xb6\x69\x40\x0e\x84\xe3\x77\xe5\xf3\x77\xdd\x59\x79\x10\x54\x28\x6b\x47\xb7\x1c\x09\x96\xf5\xb3\xcb\x1a\x7b\x54\xd9\x1b\x41\x07\xc3\x24\x0e\xe2\x1f\xed\xbb\x70\xe2\x3e\x8f\x11\x2b\x73\x03\xcb\xff\xa0\xb3\x28\xf2\xba\xe6\x47\x57\xe3\x9b\x4a\xb6\xba\x31\x4d\x53\x5e\x48\x67\x23\xa1\x7b\x79\x6e\x7f\xcb\xd2\xbc\x20\xaf\xa2\xc9\x44\xc3\xab\x32\x3f\xa8\x53\x3b\x88\xda\x4a\xb2\x06\xb9\xc9\x32\xff\xac\xad\xb8\x2c\x07\x12\xd3\x51\x10\xd1\x0a\x62\x6f\x36\xb7\x74\xf6\xa6\xbe\xb8\x43\xac\x29\x6b\xc3\xdf\x00\x00\x00\xff\xff\x3b\xa8\x66\x3e\x5c\x06\x00\x00")

func assets_full_md_bytes() ([]byte, error) {
	return bindata_read(
		_assets_full_md,
		"assets/full.md",
	)
}

func assets_full_md() (*asset, error) {
	bytes, err := assets_full_md_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/full.md", size: 1628, mode: os.FileMode(420), modTime: time.Unix(1432915115, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_index_md = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x92\x41\x6f\x13\x4d\x0c\x86\xef\xfb\x2b\x2c\xe5\xf2\x55\xfa\x9a\x9c\x7a\x41\x42\x08\x81\x10\x42\x6d\x83\xd2\x70\xaa\x90\x76\xba\xeb\x36\x03\x33\xeb\x61\xec\xdd\x24\xff\x1e\x7b\x26\x9b\x00\x52\x6f\xbb\xe3\xd7\x7e\xed\xc7\x5e\xc0\x47\x27\x0e\xee\xa8\xc7\xc0\xf0\x80\x79\xf2\x1d\x36\xcd\x62\xb1\x80\x2d\xa5\xeb\x80\x13\x06\xd8\x20\xd3\x98\x3b\xe4\xa6\xb9\x9e\xa5\xd7\xf0\xb8\x8a\xe5\xf3\xfb\x7f\xa7\x8f\xab\x9a\xf7\x81\x06\xc1\x41\x60\xc0\x17\x12\xef\xc4\xd3\xd0\x34\xdb\x1d\x02\xd7\xea\xc0\x63\x4a\x94\x85\x21\x63\xca\xc8\xaa\xf5\xc3\x0b\xa0\xeb\x76\xfa\x52\x9d\xc0\x0f\x30\xb9\xec\x69\x64\x78\xa6\x1c\x9d\xaa\x47\x36\x19\xfb\x98\x02\x42\xf7\xa7\x49\xf1\x58\x42\xf1\xa8\xb5\xb1\x3f\xa7\xb9\x8c\x6f\xac\xef\xcf\xdb\xbb\x5b\xed\xba\x15\x3c\xc8\x6a\x27\x31\xb4\x36\x8c\xcb\x3f\x7b\xda\x0f\xe7\x40\x3c\x3d\x58\xf0\xcb\xc3\xfa\xde\x02\x2e\xa5\xe0\xbb\x62\xb2\xfa\xc1\xa4\xb1\x32\x4e\x8f\xec\xf3\xd9\x08\x3a\x37\xc0\x13\xea\x04\xbf\x46\x64\x6b\x00\xbd\xec\x30\xc3\xd3\x51\x07\x97\x32\xa2\xfe\x43\xfb\xbe\xeb\x30\x49\x0b\x3b\x74\xbd\x86\x85\xca\x73\x47\x59\x67\x4f\x34\xf4\x26\x8c\x3e\xa2\x1c\x13\x02\x95\x7c\xd7\x97\x57\x07\x6d\xf5\x6a\x21\xb9\xec\x54\x72\xc9\xff\xb6\xb9\x5d\xc2\x27\x95\xe3\xc1\x19\xa0\xff\xb5\x97\x40\x7b\xf0\x5c\xc2\xeb\xbb\xf5\x57\x98\x6e\x2e\x7c\xcf\xe8\xb5\x51\x65\x5d\xe0\xd7\xe2\x05\xd6\xa3\xd1\x3a\x2f\x76\x45\x91\xd2\x6a\xba\x79\x57\x15\x6f\x8d\xde\x95\xa9\x66\x7c\xaf\x2a\x63\x5f\x74\x46\xf2\x55\x8d\x21\xd5\xd3\xd9\xcc\x1d\x15\xd0\x65\x6f\x20\xce\x07\x32\xc6\x33\xa5\xe0\x55\x60\x23\x29\x70\x13\xe0\x21\x61\x27\x55\x30\x32\x16\x51\x9d\x11\xff\xc1\x61\x91\xb2\xd0\xfc\x97\x0f\xec\x7d\x08\xa0\xac\x75\xc1\x21\x1c\xed\xae\xd8\xb3\x00\x3d\x2b\xee\x40\x02\x51\xfd\x95\x50\xed\xd5\x12\xf4\x0a\x95\x9f\x2b\xca\x31\xea\x06\x54\x7a\xb1\xd5\xd0\xa5\x98\x76\xc4\xe0\xc5\x9a\xeb\xb3\x9f\x2c\x8b\xd1\x56\x27\xf3\x28\x4b\xb8\x27\xc1\x3a\x0f\x53\xbc\x54\x61\xe8\x09\x06\xf5\x3f\x1d\x34\x68\xc1\xf9\xa4\x97\xcd\xef\x00\x00\x00\xff\xff\x07\x2a\x81\x19\xb6\x03\x00\x00")

func assets_index_md_bytes() ([]byte, error) {
	return bindata_read(
		_assets_index_md,
		"assets/index.md",
	)
}

func assets_index_md() (*asset, error) {
	bytes, err := assets_index_md_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/index.md", size: 950, mode: os.FileMode(420), modTime: time.Unix(1432915115, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_mappings_md = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x50\x41\x8b\x86\x20\x14\xbc\xfb\x2b\x04\x3b\x05\xb9\xf7\x60\x4f\xbb\x2c\x2c\xd4\x9e\x96\xbd\x1b\xbd\x42\x50\x8b\xf4\x66\xfe\xf7\x7d\xa9\xd5\xf7\x41\x7d\x5e\x46\xc6\x71\x66\xde\x63\xd4\x7b\xde\x88\x0e\x54\x08\x84\x94\xdf\x9f\xf5\x46\xfc\x08\x0d\x21\xbc\xe1\xed\x0f\x16\x2b\x27\x13\x42\x49\x08\x63\xf4\x57\x74\x0a\x2c\xf1\x7e\x11\x66\x04\x5a\x38\x5a\xbf\x53\x9e\x58\xde\x48\xeb\xd0\x85\xb1\xcd\xb4\x70\xd9\xe5\x14\x0f\x9b\x18\xf9\x2f\x09\xaa\x3f\xe4\xde\xcb\x01\xdf\x78\x2b\xe6\x59\x9a\xd1\x26\x87\x68\x31\xec\x16\xed\xd4\x83\xa2\x2b\xcd\x6d\xf0\x16\x23\x11\xa3\x17\xe2\xc7\xa4\x35\x18\x47\xaa\x78\xd6\x6a\x3f\xeb\x0d\x56\x67\x2d\x1d\x6b\x3d\x16\xc0\x68\x9d\x5a\xa6\xd1\x78\xcc\xcf\x65\x30\xec\xe6\xfd\xd8\xd5\x95\xe4\xea\xf3\x33\x97\x47\x88\x2b\x01\xd3\xbf\xc0\xff\x00\x00\x00\xff\xff\xad\x77\x2b\x0e\xb5\x01\x00\x00")

func assets_mappings_md_bytes() ([]byte, error) {
	return bindata_read(
		_assets_mappings_md,
		"assets/mappings.md",
	)
}

func assets_mappings_md() (*asset, error) {
	bytes, err := assets_mappings_md_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/mappings.md", size: 437, mode: os.FileMode(420), modTime: time.Unix(1432289186, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_models_md = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xa8\xae\xd6\x0b\xc9\x2c\xc9\x49\xad\xad\xe5\xe2\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\x55\xb0\xb2\x55\xd0\xf3\x2c\x49\xcd\x2d\xae\xad\xd5\x55\x88\xae\xae\x56\xc9\xd5\xf3\x49\x4c\x4a\xcd\xa9\xad\x8d\xd5\xd0\xcf\xcd\x4f\x49\xcd\x29\xd6\x07\x8b\xfa\x25\xe6\x02\xf5\x42\xd8\x61\xa9\x45\xc5\x99\xf9\x79\xb5\xb5\x9a\x40\xa3\x52\xf3\x52\x80\x66\x02\x02\x00\x00\xff\xff\x84\x1a\x9a\xf9\x61\x00\x00\x00")

func assets_models_md_bytes() ([]byte, error) {
	return bindata_read(
		_assets_models_md,
		"assets/models.md",
	)
}

func assets_models_md() (*asset, error) {
	bytes, err := assets_models_md_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/models.md", size: 97, mode: os.FileMode(420), modTime: time.Unix(1432915115, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_repos_md = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x08\x4a\x2d\xc8\x2f\xce\x2c\xc9\x2f\xca\x4c\x2d\xe6\xe2\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\xd0\xab\xad\xd5\x55\xa8\xae\xd6\x0b\x0d\xf2\xa9\xad\xe5\x52\x00\x02\x5d\x05\x27\xa0\x54\x72\x86\x15\x48\x18\xc2\x84\xcb\x38\xe7\xe7\xe6\x66\x96\x80\x65\x20\xcc\x60\x0f\x47\x43\x34\x59\x05\x97\xc4\x92\x54\x24\x25\x21\x99\xb9\xa9\x70\x25\x6e\xa9\x25\xc9\x19\xa9\x29\x60\x69\x30\x1b\x2a\x5b\x5d\x9d\x9a\x97\x02\xa4\x01\x01\x00\x00\xff\xff\xc4\xad\x01\x96\xa7\x00\x00\x00")

func assets_repos_md_bytes() ([]byte, error) {
	return bindata_read(
		_assets_repos_md,
		"assets/repos.md",
	)
}

func assets_repos_md() (*asset, error) {
	bytes, err := assets_repos_md_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/repos.md", size: 167, mode: os.FileMode(420), modTime: time.Unix(1432993022, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_schema_md = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x4d\x4b\xc4\x30\x10\x86\xef\xf3\x2b\x06\xb2\x07\x5d\x68\xbd\x2f\x78\x5b\x04\xa1\x88\xe0\xe2\x45\x3c\x64\x77\xa7\x35\x10\xa3\xb4\xf1\x20\xe9\xfc\x77\x67\xfa\x95\x9c\xec\xe5\xfd\x28\xc9\xfb\x10\x83\x29\xd5\x8d\x3d\x93\x67\x06\xd8\x3f\x1e\x0f\x5a\x3c\xd9\x4f\x62\xbe\x13\xf7\x4a\xfd\xe0\xbe\x02\xf3\x1e\xc0\x18\x3c\xd9\xb3\xa7\x01\x52\xea\x6d\xe8\x08\x77\x11\x0f\xf7\x58\xcf\x6d\xdd\xb8\x21\x32\x57\xf8\x96\xd2\x2e\x2e\x77\xbc\xdf\x98\x22\xdd\xca\x49\x0a\x57\x99\xfa\xef\x06\x19\x52\xac\xed\x14\x80\x2a\x8e\x78\xfa\xfd\x56\x69\x28\x74\xf1\x43\xcc\x73\x4f\x17\xa7\x78\xe2\x5f\x2e\xd6\xeb\xcf\x23\xb5\xf6\xc7\x47\xa8\xf4\x1b\xab\x52\x0a\x53\xf8\xad\xcb\x4c\xad\x32\xc9\xfc\x83\x23\x7f\x5d\xa9\x04\xa8\x5d\x80\x64\x66\x4a\xca\x93\xd3\x8c\x95\xf3\x46\x97\xab\x09\x32\xc7\x85\x75\x7a\x8e\xf5\x59\x66\xfd\x0b\x00\x00\xff\xff\x3e\xeb\x12\xcc\x97\x01\x00\x00")

func assets_schema_md_bytes() ([]byte, error) {
	return bindata_read(
		_assets_schema_md,
		"assets/schema.md",
	)
}

func assets_schema_md() (*asset, error) {
	bytes, err := assets_schema_md_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/schema.md", size: 407, mode: os.FileMode(420), modTime: time.Unix(1432289186, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_style_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x5a\x5b\x8f\xe3\xb6\x15\x7e\x9f\x5f\xa1\xce\x22\xc8\x6e\x32\x72\x24\xcb\xb2\x67\x3c\xe8\x02\x45\x51\xa0\x05\x9a\xbe\x04\x7d\xda\xec\x03\x25\xd2\x16\x63\x4a\x54\x28\x7a\x67\x66\x8b\xfc\xf7\x92\xa2\x6e\x14\x0f\x65\x3b\x2d\xfa\x50\x18\x98\x0b\x75\x78\x74\x78\x2e\xdf\xb9\xd0\xab\x12\x89\x13\xe6\x2f\x55\x98\x71\xfc\x16\xfc\xeb\x2e\x08\xc2\xb2\x09\x25\x79\x95\x61\x43\xbf\x92\x10\xe1\x5f\xce\x8d\xdc\x07\x71\x14\x7d\xf3\xac\x9f\xbe\x90\xec\x44\xe5\x02\x45\xce\x19\x17\xfb\xe0\x5d\x92\x24\xfa\x5f\xfe\x85\x88\x03\xe3\x2f\xfb\xa0\xa0\x18\x93\x4a\xaf\x1d\x78\x25\xc3\x03\x2a\x29\x7b\xdb\x07\xf7\x7f\x25\xec\x0b\x91\x34\x47\xc1\x3f\xc8\x99\xdc\x3f\x04\xc3\xc2\x43\x70\xff\x13\x39\x72\x12\xfc\xf3\x6f\x6a\xf9\x4f\x82\x22\xf6\x10\x1c\x04\x21\x0d\xaa\x9a\x87\x40\xff\x0c\x1b\x22\xe8\x61\x60\xaa\x25\x52\xa2\x6c\xeb\x57\xbd\xc4\x68\x45\xc2\x82\xd0\x63\xa1\xe5\x5b\x6d\xf5\xda\x0b\x17\x38\x7c\x11\xa8\xde\x07\x99\x20\xe8\x14\xea\x85\xe7\xbb\xdf\xee\xee\x66\xba\x40\xad\x36\x32\x94\x9f\x8e\x82\x9f\x2b\xbc\x0f\xa4\x50\x2f\xac\x91\x20\x95\x04\x37\xec\x51\x2e\xe9\x17\xf2\xe0\x3e\x28\xb4\x16\x5a\x7e\xfc\x2c\xb5\x54\xfb\x20\x82\x58\x34\x52\xf0\xea\xd8\x12\xb6\xc7\x79\xe9\x64\xcf\x38\x03\x65\x2c\xe2\x91\xd6\x1c\x7d\x4d\x4a\x7d\x4a\x45\x76\xa4\x95\x7a\xcb\x6a\xbb\x23\x25\xfc\x32\x5a\x9a\x37\x65\x4a\x01\x44\x78\x24\x2a\x44\x47\xf3\xaa\x5f\x40\xab\xe3\x5e\x19\xb8\x92\x4a\x05\xea\x79\xab\xe4\x5e\xbf\xe0\xf6\x5a\x10\x73\xec\xc1\x0b\xd0\x59\x72\x88\x32\xe7\xd8\xd5\xdc\x29\xc3\xce\x5a\xcf\xd2\x72\xa2\x92\x57\x5c\x99\x26\x27\x0f\xe3\x9f\x73\xa7\xd0\x9a\x01\xb4\x50\xd5\x67\xd9\x32\xec\x1c\x97\x56\x85\x72\x29\xd9\xef\xb6\x16\x06\xb5\x82\xaa\x92\x25\x33\xec\x3e\x61\xda\xa0\x8c\x11\xfc\xd9\x30\x3e\x8b\x46\x73\xc6\xe4\x80\xce\x0c\xf4\x9d\x51\x0a\xcb\x67\x2b\x2e\x4a\xc4\xbc\x1b\x3e\xc9\xb7\x9a\xfc\xf1\x3e\x2f\x48\x7e\x52\xd6\xb8\xff\xec\xd8\xca\xd8\xb6\x37\x55\x8d\x30\x6e\x97\x41\xf9\xa5\x16\x79\xe2\x11\xa1\x52\x08\x43\x75\x43\xb4\xc9\xcd\x5f\xcf\xe3\x43\xad\xe2\x05\x5e\xae\xdd\x64\xd1\xf2\x5e\x96\xe1\xbb\xc5\x13\x2c\xe9\xcd\xd8\x2a\x4e\xea\xd7\x1f\xe2\xd5\x66\x8a\x21\xc8\xe0\x46\x45\xcb\xec\xdc\x68\xcc\x50\xff\x30\x9a\x11\x81\x24\xe5\x95\x81\x92\x11\x54\x72\x46\x50\x35\xc5\x96\x09\x08\x05\x7f\x29\xf9\x2f\xf4\x7e\xba\xf2\xd3\x5b\xa9\x82\xf3\xde\x0f\x20\x3d\x1c\x6e\xe2\xc7\x24\xdf\x68\x05\xb6\xd0\x89\x49\xce\x8d\x00\xda\xca\x15\x81\x01\xa5\xc5\x0d\x00\x4f\x0c\xd0\xb4\xfc\x1d\x6e\x0a\xaa\x88\xd0\x5e\xb4\x10\xce\x93\x98\x1d\x9d\x3a\x4e\xeb\x57\xb3\x02\x61\xb6\x17\x08\x2d\x00\x09\x46\x7b\x49\xc9\x4b\xc5\x54\xf1\x6c\x38\xa3\x38\x78\x87\x31\x8c\x61\x62\x9f\x91\x03\xef\xa2\x5a\x45\x4e\xcd\x90\x8a\xe8\xd6\x1b\x4d\x3e\x69\xe1\x46\x25\x0a\x50\xcb\x6a\x3b\x3a\xc8\x0e\x5d\x81\xdd\xca\x9c\x42\x7b\x91\x2c\xae\x61\x16\x3b\xca\x2e\xd6\xee\x52\xe2\x2e\x6d\xdc\xa5\xd4\x5d\xda\xb6\x52\x1a\x85\x87\x92\xd7\x46\xe9\xa3\x11\x46\xb5\xa5\x60\x06\x8b\xaf\x4b\x02\x49\x54\x83\xd1\x52\xac\x9d\x74\x11\x7b\x28\x93\x39\xa5\xc9\xa9\x00\xe5\xc6\xa1\xdc\x78\x28\x53\x87\x72\xed\xa1\xdc\x3a\x94\x1e\x39\x33\xc6\xf3\xd3\xaf\x67\x2e\xc9\x44\xb3\x1e\x6c\x39\x33\xc7\x20\x9c\x39\x98\x64\x9b\x27\x02\x6c\x03\x32\x57\x9c\xb8\xcb\xff\xcc\xfa\x57\x30\xda\xa8\xb3\xc8\x37\x46\x42\x0d\xda\xfb\x40\x85\x97\x0a\x13\xc1\x4b\x54\xc1\xc2\x9a\xcd\x1e\x96\xc0\x03\xee\xdb\xc1\xbb\x1d\x4b\x72\x20\x56\x17\x08\x92\x03\xe3\xa9\xcb\x32\x72\xf0\x65\x7a\x9d\xbf\xdd\xbc\xfc\x67\x05\xb0\x9c\x21\x85\xab\xf7\x7f\x1f\x20\x37\xf8\x51\xa5\x68\x85\xa2\x3f\x92\x8a\xf1\x07\x45\x73\x16\x54\xc1\x9c\x3f\x73\x7b\xdc\xa4\xaf\x04\xae\x30\xd8\x90\x1f\x14\xab\xdf\x2d\x94\x2b\xc1\x8a\x2b\x20\x56\x98\x32\xc9\x40\x26\x65\xcf\x7e\xe9\xe0\xf9\x21\x0e\x3a\xea\x26\x44\x55\x5e\x70\xf1\x3c\x45\x2c\x5a\xb5\xb1\xde\x3a\xf4\x42\x96\xe8\x1e\x28\xe8\x55\x28\xdb\xfa\xac\x29\xa8\xc6\xca\xdc\x28\xae\xe4\x0a\xf1\xcc\xf3\x4a\xaa\xfc\x47\x51\x43\x70\x4b\x56\xf2\xaf\x21\x6f\x5e\x1d\xba\xa3\x40\x6f\x4d\x8e\x0c\x6c\xf6\xcc\xce\x8d\x4e\xf5\x84\x91\x5c\x8e\x12\xb4\x2c\x3c\x4f\x1a\xf8\x01\xb0\xe8\xd7\x66\xa8\x34\x71\x9a\x26\x85\x01\xb5\xbf\xfd\xf9\x10\xa5\xf9\xb7\xc0\xe6\x8f\xdf\xed\x0f\x54\x28\xdf\xce\x0b\xca\xb0\xeb\x16\xc1\x1f\x68\x59\x73\x21\x11\x58\xbb\xab\xdd\xca\x1f\x80\xcd\x83\x0b\x2d\xef\x57\x29\xb9\xe2\xf2\xfd\xa7\x42\x90\xc3\xe7\x0f\x9e\x6a\xf2\xea\xbc\xbf\x32\xee\x61\xa0\x89\x37\xd4\x50\xa3\x4c\x39\xed\x59\x1a\x1f\x18\x5c\x7d\x88\xc8\x89\x2b\x0d\x3e\xd4\xe1\x5a\x28\x4c\xfe\xe8\xba\xa2\x7e\xd5\x6c\x35\xb9\x62\x16\xe1\xa1\x2f\x83\x74\xa2\xed\x0f\x3c\x3f\x37\x76\x43\xe3\x3b\xcd\xff\x26\xa7\x8e\x7a\x12\x84\x21\x5d\x1d\xcd\xa1\x3c\x9e\x76\x46\x63\xa2\xed\x94\x02\xb4\x5b\x4e\xf6\xdd\x78\xb2\xaf\xe5\xb7\xc0\x61\x2f\x11\x24\x97\x08\x36\x97\x08\xd2\x4b\x04\x5b\x9b\xc0\x2e\x96\xfa\x20\xed\x4b\xd5\x28\x6a\xfd\x49\x15\x81\xba\x80\x66\x2a\x39\xd0\xa3\x52\x6c\xa9\x6a\x41\xe6\x31\x71\xd7\xe1\x76\xee\x01\xe8\xe0\x12\x41\x72\x89\x60\x73\x89\x20\xbd\x44\xb0\xb5\x09\xa6\x99\xbf\x73\xfb\x47\x7f\x28\xdc\x10\xbe\x73\x6d\x5c\xf4\x8f\xdb\xc8\x93\xdb\xc8\x37\xb7\x91\xa7\xb7\x91\xcf\x75\xba\xe0\x65\x76\x82\xf3\x96\xb1\xbd\x45\x06\xe4\x5d\x25\x26\x70\xa7\x55\xeb\x6a\x9d\x9a\xc5\x59\x84\xae\x97\x3b\x10\x42\x3c\x06\xb3\x7c\xc2\xe6\xb9\x50\x47\x5f\x23\x6a\xbc\xda\x79\x44\x5d\xa7\xbf\x4f\xd8\xf5\xad\xc2\xba\xa5\xfc\x0a\x16\x69\x93\x78\xf6\xfb\x5f\xa8\x35\x7e\x55\x4f\xd0\x59\x0c\xa4\xbd\x99\xbd\xdb\x48\x78\x78\xa7\x4b\xbc\x61\x6d\xb9\xad\x87\xd1\x55\x0f\x8e\xbb\xdd\xce\xb3\xef\xd6\x57\xd5\x4e\x38\x8d\xdd\x0c\x50\xf6\x03\x75\xbd\xb3\x84\xdd\xa5\xb6\x13\xf6\x0e\xd1\x2e\x95\xce\xde\xae\xcf\x9e\x23\x6c\x6a\x67\xbe\x34\x99\x2b\x6c\xfb\xb9\xc2\x38\x43\x08\x7b\x75\x92\x9d\xfe\x58\x53\x04\x2f\xb0\x5e\x6c\xe0\x3a\xc8\x5e\xc3\xde\xd0\xb6\x54\x70\x3f\x05\xf7\x4c\x9e\x16\xeb\xca\x96\xc3\x15\x80\xd1\x8f\xb5\x3b\x00\xf0\x68\x18\xbb\xad\x29\x48\x84\xe5\x85\x16\xd6\xaa\x70\x2c\x97\x36\x2b\xba\x17\x54\xe8\x2c\x55\x96\xcf\x3d\x95\x10\xfc\x62\x3c\x7b\xf1\xf0\xa6\x2b\x7d\x68\xd6\xbb\x4f\x19\x75\xd3\x0f\x2b\xe6\x06\xac\x34\x46\xde\x5c\x1c\x2c\x8d\xfc\x3f\x2e\xf7\x06\x97\x36\x5f\x68\x0d\x96\x67\xa9\x6e\x55\xfe\x42\xb1\x2c\xc6\xfb\x92\xf9\x68\xbc\xbb\xa2\x68\x2f\x27\xc6\x09\xb0\xbd\x7a\x22\xa4\x56\x65\x19\x38\x19\x36\xaf\xee\xa6\xad\x57\x19\xb3\xdf\x01\x63\x47\x20\x67\x86\xd6\xe1\xac\xe7\xac\xd3\xa0\xbd\x3c\xe6\xeb\x78\x89\xd9\xad\xca\x00\x04\x87\xc3\x61\x62\x63\xe3\xb9\x23\xd3\x3c\xcf\x97\x98\xee\x2b\x59\x18\x0b\xbd\x5f\x57\x1f\xbc\xaf\x78\xd4\x9f\xa5\xab\x90\x12\xbd\x86\x33\xf3\x5c\x3f\x8b\x1e\x26\x20\x76\x2c\xf6\xd8\x64\x7c\x6d\xd5\x5d\xd0\xb8\xb5\xc3\xfc\xe6\x66\x16\xb3\x8f\xe9\x37\x30\x84\x8a\x63\x86\xde\x47\x0f\xed\x67\x15\x6d\x3e\x4c\xb4\x28\x10\xa6\xe7\x46\xf5\x78\x70\x00\x6a\x81\xbb\x36\xdb\x31\x7d\xfb\x6c\x1c\xac\x32\x22\xe5\x74\xe8\x1f\x0e\xf2\x8e\x13\xd5\x9f\xa3\x08\x45\xe0\x58\x55\x65\x9b\x8f\x1e\xed\xf8\x8e\xdb\xab\xdf\x13\x0b\x05\x95\xa4\x95\x46\x91\x2a\xee\xb6\x66\x96\x06\xd4\x40\x4b\x5b\xa8\xe8\x60\x3a\x42\xa0\xe8\xf6\x81\xd7\x64\x57\x0d\xa8\xaf\xcf\xaf\xc3\x61\x7b\x6c\x74\xa3\xdd\xb5\xf1\xbc\x2c\x4b\x3d\xb9\xf3\xb0\xd3\x9f\xeb\xed\x6d\xcb\xec\xc1\x32\x58\xe5\xfe\xe1\xdb\xe4\x3e\x75\x99\x78\x70\x80\x59\x47\xf0\x6c\xc7\x1d\xad\xa8\x9e\x57\xf9\xcb\x89\xd9\x0d\xc5\x84\xde\xd2\xdb\x64\xf0\x02\x88\x08\xe9\xf3\x16\xa7\xe9\x0f\xe4\x0b\x9f\xe1\xf9\x18\x42\x43\xa0\xf8\xd5\x74\xca\xf0\x52\xcf\x34\xd1\x88\xb2\x70\x90\xba\x79\x3d\x86\x6e\x0d\x22\x3b\x99\xa6\x69\xba\xd4\xdd\xc3\x9e\x96\xeb\xcf\x54\x2b\x06\x97\x35\x42\x1b\x6c\x9e\x75\x32\xc3\xce\x2c\xcb\x7c\x0e\xda\x61\x6b\x81\xb0\xb1\x63\x43\xa4\xca\xfd\xa1\xe6\x19\x75\x1b\x01\x1f\xae\x59\x98\x5b\x17\x6b\x4f\xdb\xa7\xc7\xa7\xad\x97\xd6\x9d\x3e\xe9\xe5\xa6\xfd\xf9\xc5\x62\x14\x45\x8f\xdb\x0c\x6c\x81\x34\xad\x6b\xe3\x76\xb5\xb2\x58\xec\x9e\x52\x8c\xbc\x2c\xcc\x4b\x1b\x8f\x44\x25\xb5\x58\xb5\x5f\x9f\xf0\x88\x52\x59\x17\xd6\xef\xb6\x09\x4a\x52\x30\x3f\x6a\xea\x93\x45\x8b\x76\x31\x4e\xc1\x04\xad\x69\x6b\xdc\xc0\xc2\x2d\x28\xb1\x6e\xc8\xe2\xb9\xdc\x49\x8c\x59\x36\xe6\xc9\x61\xbd\x76\x8f\x1b\x81\x96\x1f\x13\xeb\x70\xf1\x63\xb2\x7d\x02\x7b\x2d\xd7\xda\x04\x6f\x11\xdc\xf0\x6a\x5a\x8a\x2d\xe2\x2c\x5d\xa3\xd8\xab\x35\x4a\x7d\x15\x47\xbf\x6f\xe4\xe4\xaf\x41\x6c\xad\x80\x06\xbe\xb2\x9e\xd3\x2c\x4a\x66\x73\x78\x4a\x50\x0c\x36\xae\x2d\xb1\x5b\xfa\x99\xe5\xce\xdd\xe0\xa7\x8d\xad\x7b\x9c\x90\xc7\xf8\x36\x19\x7f\x9d\xc7\x9f\xfa\x78\x89\x81\xf0\x80\x5b\x18\xcf\xfe\xcc\xbb\xff\x2a\x59\xb1\xbf\x70\x25\x39\xc9\xa7\x36\xce\xf0\x3a\x8f\x16\x0e\x12\xfb\x58\x11\xa4\x98\x21\x1b\xac\x51\x9a\x80\x43\x10\x23\x94\x00\xe1\xe7\x96\x73\x71\xd0\x8a\xff\xc5\xdc\x64\xd2\xd2\x7f\x70\x13\xf8\xff\x9c\xcd\x24\x6a\x4e\x61\x7b\x27\xab\x0a\xda\x12\xbe\xa1\xf5\x5e\x13\xd9\x9b\xbf\x87\x98\x4d\xfb\x5c\x5f\x55\x38\xdb\x36\x7e\xa5\x66\xa8\xb8\xf4\x64\x33\xd5\x5f\x23\x6b\xa7\x78\xea\x50\xab\xad\x29\xfe\xaf\xbf\x22\xd8\xb7\x5f\x52\x22\xf8\xfb\x95\xd6\x1a\x0f\x19\xca\x88\x81\xa8\xaf\x21\xad\x30\x79\x6d\xa7\x97\xbe\x7b\x9c\xf1\x0b\x49\xd6\x77\x69\x7e\xbb\xfb\x77\x00\x00\x00\xff\xff\xcd\xb8\x04\x0a\xc0\x28\x00\x00")

func assets_style_css_bytes() ([]byte, error) {
	return bindata_read(
		_assets_style_css,
		"assets/style.css",
	)
}

func assets_style_css() (*asset, error) {
	bytes, err := assets_style_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/style.css", size: 10432, mode: os.FileMode(420), modTime: time.Unix(1432289186, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_wrap_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x4c\xc9\x4f\x2e\xa9\x2c\x48\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\xc9\x48\x4d\x4c\xb1\xe3\x52\x00\x02\x9b\xe2\x92\xca\x9c\x54\xbb\xea\x6a\xbd\x60\x10\xa3\xb6\xd6\x46\x1f\x22\xc2\x65\xa3\x0f\x51\x65\x93\x94\x9f\x52\x09\x55\x9c\x92\x59\xa6\x90\x9c\x93\x58\x5c\x6c\xab\x94\x9b\x58\x94\x9d\x92\x5f\x9e\xa7\x0b\x92\x56\x82\xc8\x83\x00\xd0\x24\xe7\xfc\xbc\x92\xd4\xbc\x92\xda\x5a\x88\x26\x7d\xa0\x2e\x90\x71\x10\x73\x80\xc6\x82\xdd\x00\x08\x00\x00\xff\xff\x7b\x3d\x33\x8f\x94\x00\x00\x00")

func assets_wrap_html_bytes() ([]byte, error) {
	return bindata_read(
		_assets_wrap_html,
		"assets/wrap.html",
	)
}

func assets_wrap_html() (*asset, error) {
	bytes, err := assets_wrap_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/wrap.html", size: 148, mode: os.FileMode(420), modTime: time.Unix(1432289186, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/definition.md": assets_definition_md,
	"assets/full.md": assets_full_md,
	"assets/index.md": assets_index_md,
	"assets/mappings.md": assets_mappings_md,
	"assets/models.md": assets_models_md,
	"assets/repos.md": assets_repos_md,
	"assets/schema.md": assets_schema_md,
	"assets/style.css": assets_style_css,
	"assets/wrap.html": assets_wrap_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"definition.md": &_bintree_t{assets_definition_md, map[string]*_bintree_t{
		}},
		"full.md": &_bintree_t{assets_full_md, map[string]*_bintree_t{
		}},
		"index.md": &_bintree_t{assets_index_md, map[string]*_bintree_t{
		}},
		"mappings.md": &_bintree_t{assets_mappings_md, map[string]*_bintree_t{
		}},
		"models.md": &_bintree_t{assets_models_md, map[string]*_bintree_t{
		}},
		"repos.md": &_bintree_t{assets_repos_md, map[string]*_bintree_t{
		}},
		"schema.md": &_bintree_t{assets_schema_md, map[string]*_bintree_t{
		}},
		"style.css": &_bintree_t{assets_style_css, map[string]*_bintree_t{
		}},
		"wrap.html": &_bintree_t{assets_wrap_html, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

